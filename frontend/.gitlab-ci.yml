cache:
  paths:
    - frontend/dist/frontend

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
  - build
  - test
  - nonify
  - release

build-frontend-code-job:
  stage: build
  only:
    changes:
      - frontend/**/*
  script:
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist/frontend/*

sonarqube-frontend-sast:
  stage: test
  script: 
    - >
      cd frontend

      sonar-scanner
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_FRONT}
      -Dsonar.projectName=${SONAR_POJECT_NAME_FRONT}
      -Dsonar.sources=.
  needs:
    - build-frontend-code-job
  image: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache

telegram-notification-frontend:
  stage: nonify
  only:
    changes:
      - frontend/**
    variables:
      - $CI_COMMIT_MESSAGE =~ /all tests passed/
  script:
    - >
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"chat_id\": \"-1002007326342\", \"text\": \"Никита Семеняк собрал frontend. URL для скачивания артефактов: ($CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-frontend-code-job)\"}" \
        https://api.telegram.org/bot$TELEGRAM_KEY/sendMessage
  needs:
    - build-frontend-code-job
    - sonarqube-frontend-sast

upload-frontend-release:
  stage: release
  only:
    changes:
    - frontend/**/*
  needs:
    - build-frontend-code-job
  script:
    - cd frontend/dist
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - >
      curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}"
      --upload-file sausage-store-${VERSION}.tar.gz
      ${NEXUS_REPO_URL}${NEXUS_FRONTEND}frontend/dist/frontend/${VERSION}/sausage-store-${VERSION}.tar.gz