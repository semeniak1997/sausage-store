stages:
  - build
  - test
  - release
  - deploy

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

build-backend-report-job:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend-report"
      --dockerfile "${CI_PROJECT_DIR}/backend-report/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend-report:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true  

gitlab-sast:
  stage: test
  needs:
    - build-backend-report-job
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml

sonarqube-backend-report-sast:
  stage: test
  script:
    - cd backend-report
    - >
      sonar-scanner 
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK_REPORT} 
      -Dsonar.host.url=${SONARQUBE_URL} 
      -Dsonar.login=${SONAR_LOGIN_BACK_REPORT}
      -Dsonar.projectName=${SONAR_PROJECT_NAME_BACK_REPORT}
  needs:
    - build-backend-report-job
  image: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache

upload-backend-report-release:
  stage: release
  needs:
    - build-backend-report-job
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA $CI_COMMIT_SHA

deploy-backend-report:
  stage: deploy
  needs:
      - upload-backend-report-release
  image: docker:24.0.7-alpine3.19
  before_script:
      - apk add docker-cli-compose openssh-client bash gettext 
      - eval $(ssh-agent -s)
      - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      - mkdir -p ~/.ssh
      - chmod 700 ~/.ssh
      - echo "${SSH_KNOWN_HOSTS}" >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
      - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
  script: 
      - echo "VERSION=$CI_COMMIT_SHA" >> deploy.env
      - echo "MONGO_USER=${MONGO_USER}" >> deploy.env
      - echo "MONGO_PASS=${MONGO_PASS}" >> deploy.env
      - echo "MONGO_HOST=${MONGO_HOST}" >> deploy.env
      - echo "MONGO_PORT=${MONGO_PORT}" >> deploy.env
      - echo "MONGO_DBNAME=${MONGO_DBNAME}" >> deploy.env
      - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
      - docker --context remote compose --env-file deploy.env up backend-report -d --pull "always" --force-recreate
  environment:
      name: review/$CI_COMMIT_REF_NAME
      url: http://${DEV_HOST}:80
  rules: 
    - when: manual

