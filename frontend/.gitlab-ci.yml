cache:
  paths:
    - frontend/dist

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
  - build
  - test
  - nonify
  - release
  - deploy

build-frontend-code-job:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-frontend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true

sonarqube-frontend-sast:
  stage: test
  script: 
    - >
      cd frontend

      sonar-scanner
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_FRONT}
      -Dsonar.projectName=${SONAR_POJECT_NAME_FRONT}
      -Dsonar.sources=.
  needs:
    - build-frontend-code-job
  image: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache

telegram-notification-frontend:
  stage: nonify
  only:
    changes:
      - frontend/**
    variables:
      - $CI_COMMIT_MESSAGE =~ /all tests passed/
  script:
    - >
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"chat_id\": \"-1002007326342\", \"text\": \"Никита Семеняк собрал frontend. URL для скачивания артефактов: ($CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-frontend-code-job)\"}" \
        https://api.telegram.org/bot$TELEGRAM_KEY/sendMessage
  needs:
    - build-frontend-code-job
    - sonarqube-frontend-sast

upload-frontend-release:
  stage: release
  needs:
    - build-frontend-code-job
    - sonarqube-frontend-sast
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $CI_COMMIT_SHA 

deploy-frontend:
    stage: deploy
    needs:
        - upload-frontend-release
    image: docker:24.0.7-alpine3.19
    before_script:
        - apk add docker-cli-compose openssh-client bash gettext
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - echo "${SSH_KNOWN_HOSTS}" >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
        - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    script:
        - echo "VERSION=$CI_COMMIT_SHA" >> deploy.env
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker --context remote compose --env-file deploy.env up sausage-frontend -d --pull "always" --force-recreate
    environment:
        name: review/$CI_COMMIT_REF_NAME
        url: http://${DEV_HOST}:80
    rules: 
      - when: manual

