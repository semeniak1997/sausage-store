cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90

stages:
  - build
  - test
  - nonify
  - release
  - deploy

build-backend-code-job:
  stage: build
  only:
    changes:
      - backend/**/*
  script:
    - cd backend
    - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH}  
  
include:
  - template: Security/SAST.gitlab-ci.yml  

spotbugs-sast:
  stage: test
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  cache:
    paths:
      - ${CI_PROJECT_DIR}/.m2/repository
  artifacts:
    reports:
       sast: gl-sast-report.json

sonarqube-backend-sast:
  stage: test
  script: 
    - >
      cd backend

      mvn verify sonar:sonar 
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_BACK}
      -Dsonar.projectName=${SONAR_POJECT_NAME_BACK}
      -Dsonar.qualitygate.wait=true
  needs:
    - build-backend-code-job
  image: maven:3.8-openjdk-16
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache

telegram-notification-backend:
  stage: nonify
  only:
    changes:
      - backend/**
    variables:
      - $CI_COMMIT_MESSAGE =~ /all tests passed/
  script:
    - >
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"chat_id\": \"-1002007326342\", \"text\": \"Никита Семеняк собрал backend. URL для скачивания артефактов: ($CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job)\"}" \
        https://api.telegram.org/bot$TELEGRAM_KEY/sendMessage
  needs:
    - build-backend-code-job
    - sonarqube-backend-sast

upload-backend-release:
  stage: release
  only:
    changes:
      - backend/**/*
  needs:
    - build-backend-code-job
    - sonarqube-backend-sast
  script:
    - cd backend
    - mvn deploy -DskipTests -Dmaven.repo.local=${MAVEN_REPO_PATH} -s settings.xml -Dversion.application=${VERSION} 

deploy-backend:
    stage: deploy
    needs:
        - upload-backend-release
    before_script:
        - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
        - mkdir -p ~/.ssh
        - chmod 600 ~/.ssh
        - echo "${SSH_KNOWN_HOSTS}" >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
    script:
        - scp -o StrictHostKeyChecking=no ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
        - ssh -o StrictHostKeyChecking=no ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; \
          export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; \
          export "NEXUS_BACKEND=${NEXUS_BACKEND}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}"; \
          export "PSQL_USER=${PSQL_USER}"; export "PSQL_PASSWORD=${PSQL_PASSWORD}"; export "PSQL_HOST=${PSQL_HOST}"; export "PSQL_DBNAME=${PSQL_DBNAME}"; \
          export "PSQL_PORT=${PSQL_PORT}"; export "JAVA_KEYSTORE_PASS=${JAVA_KEYSTORE_PASS}"; setsid /bin/bash -s " < ./backend/deploy.sh
    environment:
      name: review/$CI_COMMIT_REF_NAME
      url: http://${DEV_HOST}:80
    rules: 
      - when: manual
